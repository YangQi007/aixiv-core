name: Deploy to AWS ECS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: aixiv-backend
  ECS_CLUSTER: aixiv-cluster
  ECS_SERVICE: aixiv-backend
  ECS_TASK_DEFINITION: aixiv-backend

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov httpx
    
    - name: Run tests
      env:
        TESTING: "true"
      run: |
        python -m pytest tests/ -v --tb=short
    
    # - name: Lint code
    #   run: |
    #     pip install flake8 black isort
    #     flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
    #     black --check app/
    #     isort --check-only app/

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
        --query taskDefinition > task-definition.json
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: aixiv-backend
        image: ${{ steps.build-image.outputs.image }}
    
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
    
    - name: Wait for ECS service to be stable
      run: |
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }}
    
    - name: Run database migrations
      run: |
        # Get the task ARN
        TASK_ARN=$(aws ecs list-tasks \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service-name ${{ env.ECS_SERVICE }} \
          --query 'taskArns[0]' \
          --output text)
        
        # Execute the migration script inside the container
        aws ecs execute-command \
          --cluster ${{ env.ECS_CLUSTER }} \
          --task $TASK_ARN \
          --container aixiv-backend \
          --interactive \
          --command "/bin/bash scripts/run_migrations.sh" << /dev/null
    
    - name: Get ALB DNS name
      id: alb-dns
      run: |
        ALB_DNS=$(aws elbv2 describe-load-balancers --names aixiv-alb --query 'LoadBalancers[0].DNSName' --output text)
        echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment successful!"
          echo "Application URL: http://${{ steps.alb-dns.outputs.alb_dns }}"
          echo "Health Check: http://${{ steps.alb-dns.outputs.alb_dns }}/api/health"
        else
          echo "❌ Deployment failed!"
        fi 